import os
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
from dotenv import load_dotenv
import re
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
import logging

# Load environmental variables
load_dotenv(".env")

# initialize app
app = App(token=os.getenv("SLACK_BOT_TOKEN"))

# Regex string to detect
ticket_regex = re.compile("\d\d\d\d\d\d")

# slack web client
client = WebClient(token=os.getenv("SLACK_BOT_TOKEN"))

# Create logger and stores log in Log.log file
logging.basicConfig(filename='./Log.log',level=logging.DEBUG)

# Returns 6-digit code if it is present within an input string
def has_digits(text):
    res = re.search('\d\d\d\d\d\d', text)
    if(res is not None):
        return True

# returns whether or not a 6-digit code is present within an input string
def search_digits(text):
    res = re.search('\d\d\d\d\d\d', text)
    if(res is not None):
        return res.group(0)

# Get all instances of digits in string input
def get_all_digits(text):
    return re.findall('\d\d\d\d\d\d',text)

# get conversation history based on channel ID as an input
def get_history(c_id):
    try:
        # Call the conversations.history method using the WebClient
        # conversations.history returns the first 100 messages by default
        # These results are paginated, see: https://api.slack.com/methods/conversations.history$pagination
        result = client.conversations_history(channel=c_id)
        conversation_history = result["messages"]
        logging.info("{} messages found in {}".format(len(conversation_history), id))
        return conversation_history[0]
        # Print results
    except SlackApiError as e:
        logging.error("Error creating conversation: {}".format(e))


# React to message in slack workspace
@app.message(ticket_regex)
def send_ticket_link(message, context,logger):
    # Ticket number if match is found inside of message
    tick_num = context['matches']
    
    # Channel ID from message
    channel_id = message["channel"]
    
    # Bot user ID
    BOT_ID = client.api_call("auth.test")['user_id']
    
    # User ID of participant in latest message of current slack channel
    hist = get_history(channel_id)

    # Send message if the last message is not sent by the bot
    if(BOT_ID != hist['user']):
        # Iterate through instances of when the user has typed in a 6-digit number
        for index in range(0,len(tick_num)):
                    # Payload housing link and message
                    attachment= [
                    {
                        "fallback": "Upgrade your Slack client to use messages like these.",
                        "color": "#4179ef",
                        "blocks": [
                        {
                            "type": "header",
                            "text": {
                                "type": "plain_text",
                                "text": "Cherwell Service Management IT Ticket",
                                "emoji": True
                            }
                        },
                        {
                            "type": "section",
                            "text": {
                                "type": "mrkdwn",
                                "text": f"*Ticket*: {tick_num[index]} \n*Hyperlink*: {os.getenv('BASE_LINK')}/{tick_num[index]}"
                            }
                        },
                        {
                            "type": "divider"
                        },
                        {
                            "type": "actions",
                            "elements": [
                            {
                                "type": "button",
                                "text": {
                                    "type": "plain_text",
                                    "text": "Ticket Link",
                                    "emoji": True
                                },
                                "value": "click_me_123",
                                "action_id": "actionId-0",
                                "url": f"{os.getenv('BASE_LINK')}/{tick_num[index]}"
                            }
                        ]
                    }
                ]
            }
        ]
                    # Send message to channel
                    try:
                        client.chat_postMessage(
                        channel=channel_id,
                        text=f"Cherwell Ticket {tick_num[index]}",
                        attachments=attachment
                    )
                    # throw error if it fails
                    except SlackApiError as e:
                        logging.error(f"Error: {e}")
	
# Slack app command that allows posting Cherwell link in Direct Messages or Group Direct Messages 
@app.command("/ticket")
def send_link(ack,respond,command,say):
    # Acknowledge slack command response
    ack()
    
    # Get the ticket number from user response
    tick_nums = get_all_digits(command['text'])
    
    # Command parameter input of whatever characters come after the last 6-digit ticket code
    description = command['text'][6:]
    
    # If there is no Ticket description string input from the user
    if(description == "" or description ==" "):
        # set the description itself to N/A
        description = "N/A"
    # Payload to send current slack channel command is invoked in
    payload={
        "text": f"Ticket {tick_num}",
        "response_type": "in_channel",
        "attachments": [
            {
                "color": "#4169e1",
                "text": f"*Cherwell Service Management*\n*Ticket* {tick_num}\n*Description:* {description}\n*Hyperlink:* {os.getenv('BASE_LINK')}/{tick_num}",
            }   
        ]
    }
    # If there exists a 6-digit code in the user input
    if(has_digits(command['text'])):
        # Send payload to channel
        respond(payload)
        # If theres an error, send user an error.
    else:
        error_payload = {
            "response_type": "in_channel",
            "text": f"{command['text']} is not a valid Cherwell 6-digit ticket code. Please try again in this format: `/ticket 210330 Defective PC`"
        }
        # send error payload
        respond(error_payload)

# start app
if __name__ == "__main__":
    SocketModeHandler(app, os.getenv("SLACK_APP_TOKEN")).start()
