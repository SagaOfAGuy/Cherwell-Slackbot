
import os
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
from dotenv import load_dotenv
import re
from slack_sdk import WebClient
import logging




# Load environmental variables
load_dotenv(".env")
# initialize app
app = App(token=os.getenv("SLACK_BOT_TOKEN"))

# Regex string to detect
ticket_regex = re.compile("\d\d\d\d\d\d")

# slack web client
client = WebClient(token=os.getenv("SLACK_BOT_TOKEN"))

# Create logger
logging.basicConfig(filename='./Log.log',level=logging.DEBUG)


def has_digits(text):
    res = re.search('\d\d\d\d\d\d', text)
    if(res is not None):
        return True

def search_digits(text):
    res = re.search('\d\d\d\d\d\d', text)
    if(res is not None):
        return res.group(0)






# React to message in slack workspace
@app.message(ticket_regex)
def send_ticket_link(message, context,logger):
    # Ticket number if match is found inside of message
    tick_num = context['matches'][0]
    # Channel ID from message
    channel_id = message["channel"]
    # JSON containing link
    attachment= [
		{
			"fallback": "Upgrade your Slack client to use messages like these.",
			"color": "#4179ef",
			"blocks": [
				{
					"type": "header",
					"text": {
						"type": "plain_text",
						"text": "Cherwell Service Management IT Ticket",
						"emoji": True
					}
				},
				{
					"type": "section",
					"text": {
						"type": "mrkdwn",
						"text": f"*Ticket*: {tick_num}\n*Hyperlink*: {os.getenv('BASE_LINK')}/{tick_num}"
					}
				},
				{
					"type": "divider"
				},
				{
					"type": "actions",
					"elements": [
						{
							"type": "button",
							"text": {
								"type": "plain_text",
								"text": "Ticket Link",
								"emoji": True
							},
							"value": "click_me_123",
							"action_id": "actionId-0",
							"url": f"{os.getenv('BASE_LINK')}/{tick_num}"
						}
					]
				}
			]
		}
	]
    # Send JSON data to channel that sent message
    try:
        client.chat_postMessage(
                channel=channel_id,
                text=f"Cherwell Ticket {tick_num}",
                attachments=attachment

        )
    except SlackApiError as e:
        logger.error(f"Error: {e}")


# Slack app command that allows posting Cherwell link in DMs. 
@app.command("/ticket")
def send_link(ack,respond,command,say):
    # Acknowledge slack command response
    ack()
    # Get the ticket number from user response
    tick_num = search_digits(command['text'])
    description = command['text'][6:]
    if(description == "" or description ==" "):
        description = "N/A"
    # Payload to send current slack channel command is invoked in
    payload={
        "text": f"Ticket {tick_num}",
        "response_type": "in_channel",
        "attachments": [
            {
                "color": "#4169e1",
                "text": f"*Cherwell Service Management*\n*Ticket* {tick_num}\n*Description:* {description}\n*Hyperlink:* {os.getenv('BASE_LINK')}/{tick_num}",
            }   
        ]
    }
    # If there exists a 6-digit code in the user input
    if(has_digits(command['text'])):
        # Send payload to channel
        respond(payload)
        # If theres an error, send user an error.
    else:
        error_payload = {
            "response_type": "in_channel",
            "text": f"{command['text']} is not a valid Cherwell 6-digit ticket code. Please try again in this format: `/ticket 210330 Defective PC`"
        }
        # send error payload
        respond(error_payload)


# start app
if __name__ == "__main__":
    SocketModeHandler(app, os.getenv("SLACK_APP_TOKEN")).start()
